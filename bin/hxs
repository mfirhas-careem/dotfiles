#!/bin/bash

# This script will open helix setting the dir path of open file and tab's title

filepath="$1"

# check if input is empty or "." or validate if it's a real path
parse_filepath() {
  if [ -z "$filepath" ] || [ "$filepath" = "." ]; then		
    echo "$(pwd)"
  else
    # Check if the path exists
    if [ -e "$filepath" ]; then
      # If it's a file, get its directory; if it's a directory, use it as-is
      if [ -f "$filepath" ]; then
        echo "$(dirname "$filepath")"
      elif [ -d "$filepath" ]; then
        echo "$filepath"
      fi
    else
      echo "Error: Path '$filepath' does not exist" >&2
      exit 1
    fi
  fi
}

# get last part of space separated string
get_last_space_separated() {
    local input_string="$1"
    local last_part=$(echo "$input_string" | awk '{print $NF}')
    echo "$last_part"
}

# get last part of slash separated string
get_last_slash_separated() {
    local input_path="$1"
    local last_part=$(echo "$input_path" | awk -F'/' '{print $NF}')
    echo "$last_part"
}

get_pwd() {
  # Get the current working directory
  current_dir=$(pwd)

  # Get the length of the current directory string
  dir_length=${#current_dir}

  # Check if the length of the directory is less than or equal to 13
  if [ "$dir_length" -le 13 ]; then
      # If the directory length is less than or equal to 13, print the whole directory
      echo "$current_dir"
  else
      # Otherwise, extract and print the last 13 characters
      echo "..${current_dir: -13}"
  fi
}

get_tab_title() {
  local filepath_param="$1"  # Use the parameter instead of global $filepath
  if [[ $filepath_param == *" "* ]]; then
    local last_space_separated=$(get_last_space_separated "$filepath_param")
    local base_space_separated=$(get_last_slash_separated "$last_space_separated")
    echo "hxx - $base_space_separated"
  else
    local base=$(get_last_slash_separated "$filepath_param")
    echo "hxx - $base"
  fi
}

# Parse and validate the filepath
parsed_path=$(parse_filepath)

# Exit if parse_filepath failed
if [ $? -ne 0 ]; then
  exit 1
fi

wezterm set-working-directory "$parsed_path"
wezterm cli set-tab-title "$(get_tab_title "$parsed_path")"
hxx "$filepath"
wezterm cli set-tab-title "zsh"
